@model  CPV_Mark3.Models.CaseTable


@{
    var images = ViewBag.Images as byte[][];
}

@{
    ViewBag.Title = "CreateVerifyManagerView";
}

@{
    var images2 = ViewBag.Images as byte[][];
}

@{
    Layout = null;
}
<html>
<head>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>


    <style>
        @@import url('https://fonts.googleapis.com/css2?family=Jaldi&display=swap');

        .form-horizontal {
            width: 100%;
            padding: 50px;
        }

        .form-control {
            font-size: 1.75rem !important;
            font-family: 'Jaldi', sans-serif;
            font-weight: 600 !important;
        }

        body {
            padding: 0px;
            font-size: 15px;
            font-weight: 100;
            background: linear-gradient(to bottom,#25947a, #236a8b 50%);
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .space {
            padding: 40px;
            scroll-behavior: smooth;
            overflow: auto; /* Enable both horizontal and vertical scrollbars if needed */
            height: 100vh;
        }

        .bod {
            width: 98%;
            height: 95vh;
            background-color: #FFFFFF;
            border-radius: 12px;
            overflow: hidden;
        }

        .heading {
            color: #3A6C6C;
            font-size: 40px;
            font-family: 'Jaldi', sans-serif;
            text-align: left;
            padding-left: 10px;
            font-weight: 600;
        }

        .label {
            color: #857F7F;
            font-family: 'Poppins', sans-serif;
            font-weight: 600;
            font-size: 15px;
            white-space: pre-line !important;
            width: 100px;
            white-space: nowrap;
        }

        .box {
            background-color: #E3F4F4;
            border-style: none;
            width: 300px;
            height: 30px;
            margin-top: 7px;
            margin-bottom: 10px;
            border: 1px groove #569F9F;
            font-weight: 700;
        }

        input, select, textarea {
            font-size: 20px;
            max-width: 1000px;
        }

        .SubBtn {
            background-color: #012b2b;
            color: white;
            font-family: 'Jaldi', sans-serif;
            font-size: 15px;
            border-radius: 8px;
        }

            .SubBtn:hover {
                background-color: #024444;
                color: white;
            }

        .ChngBtn {
            background-color: #012b2b;
            color: white;
            font-family: 'Jaldi', sans-serif;
            font-size: 15px;
            width: 100px;
            height: 30px;
            border-radius: 8px;
            font-weight: 500;
        }

            .ChngBtn:hover {
                background-color: #024444;
                color: white;
            }

        .bckBtn {
            background-color: #c30000;
            color: white;
            font-family: 'Jaldi', sans-serif;
            font-size: 15px;
            width: 100px;
            height: 30px;
            border-radius: 3px;
            box-shadow: none;
            font-weight: 600;
        }

            .bckBtn:hover {
                background-color: #ff0606;
                color: white;
            }

        #loading {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 999;
            background: rgba(255,255,255,0.8);
            padding: 20px;
            border-radius: 5px;
            display: none;
        }

        .form-control {
            height: 40px;
        }
    </style>
    <script>
        function initialize() {
            var myLatlng = new google.maps.LatLng(-34.397, 150.644);
            var myOptions = {
                zoom: 8,
                center: myLatlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            }
            var map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
        }

        function loadScript() {
            var script = document.createElement("script");
            script.type = "text/javascript";
            script.src = "http://maps.google.com/maps/api/js?sensor=false&callback=initialize";
            document.body.appendChild(script);
        }

        window.onload = loadScript;


    </script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=false&key=AIzaSyAxcusmWmO3lhnqIPSgeqhcsajy5vODlzU&callback=Function.prototype"></script>
    <script type="text/javascript">


        var map;
        function ShowErrorPopup() {


                var lat =  @Model.Latitude;
                var longi = @Model.Longitude;


            var latlng = new google.maps.LatLng(lat, longi);
            var myOptions = {
                zoom: 14,
                zoomControl: false,
                scaleControl: false,
                scrollwheel: false,
                disableDoubleClickZoom: true,
                center: latlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map(document.getElementById("map"), myOptions);
            var marker = new google.maps.Marker
                (
                    {
                        position: new google.maps.LatLng(lat, longi),
                        map: map,
                    }
                );
        }
        google.maps.event.addDomListener(window, 'load', ShowErrorPopup);
    </script>


    @*<script src="/bundles/jquery?v=2u0aRenDpYxArEyILB59ETSCA2cfQkSMlxb6jbMBqf81"></script>

        <script src="/bundles/bootstrap?v=ESck_wvaWCiF5JsitLMh765lhMnw7BVBtZE-YUTa4Ns1"></script>
        <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>*@

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>


    <script type="text/javascript">

        $(document).ready(function () {


            //$("#searchInput").keypress(function (e) {
            //    if (e.which === 13) {
            //        e.preventDefault();
            //        $("form").submit();
            //        // Display SweetAlert
            //        Swal.fire({
            //            title: 'Done',
            //            icon: 'success',
            //            showCancelButton: false,
            //            showConfirmButton: false,
            //            timer: 1500
            //        });
            //    }
            //});

            $("form").keypress(function (e) {
                // Check if Enter key is pressed
                if (e.which === 13) {
                    e.preventDefault();
                    $(this).submit();
                }
            });

            $("#divLoading").hide();
            $("#Loaded").show();

            var imageList = [];

            $(".draggable-image").each(function () {
                var imageId = $(this).attr("id");

                // Calculate initial position relative to the container
                var containerOffset = $("#imageContainer").offset();
                var initialPosition = {
                    top: $(this).position().top,
                    left: $(this).position().left
                };

                var imageInfo = {
                    id: imageId,
                    initialPosition: initialPosition
                };
                imageList.push(imageInfo);
            });

            $(".draggable-image").draggable({
                containment: "parent",
                stop: function (event, ui) {
                    var imageId = $(this).attr("id");

                    var containerOffset = $("#imageContainer").offset();
                    var absolutePosition = {
                        top: $(this).position().top,
                        left: $(this).position().left
                    };

                    var updatedImage = imageList.find(image => image.id === imageId);
                    updatedImage.position = absolutePosition;

                    //console.log(imageList);
                }
            });

            $("#ChngBtn").on("click", function () {
                $("#divLoading").show();
                $("#Loaded").hide();
                data = { imageList: JSON.stringify(imageList).toString() };
               // console.log(data);
                $.ajax({
                    url: '@Url.Action("_ImagePosition","Home")',
                    type: "POST",
                    data: data,
                    success: function (response) {
                        //console.log(response);
                        $("#divLoading").hide();
                        $("#Loaded").show();
                        let url = '@Url.Action("_ImageContainer","Home", new { id = Model.Id })';
                        $("#imageContainer").load(url);

                    },
                    error: function (error) {
                        console.error(error);
                    }
                });
            });

            $('.form-control').on('input', function () {
                var currentUrl = $(location).attr('href');
                localStorage.setItem("EditUrl", currentUrl);
                console.log(currentUrl);
                var inputId = $(this).attr('id'); // Get the ID of the input
                var inputValue = $(this).val(); // Get the value of the input
                localStorage.setItem(inputId, inputValue); // Store the input value with its ID in localStorage
            });

            var currentUrl = $(location).attr('href');
            var EditUrl = localStorage.getItem('EditUrl');
            if (currentUrl == EditUrl) {
                var res = confirm("Do you want to load \nthe previous unsaved data?");
                if (res === true) {
                    $('.form-control').each(function () {
                        var inputId = $(this).attr('id'); // Get the ID of the input
                        var savedValue = localStorage.getItem(inputId); // Retrieve the stored value from localStorage
                        if (savedValue) {
                            $(this).val(savedValue); // Set the input value from the stored value
                            console.log(savedValue);
                        }

                    });
                }
                else {
                    localStorage.clear();
                }
                //Retrieve data when the page loads

            }

            $('#Form').on('submit', function (event) {
                // Prevent the default form submission
                event.preventDefault();
                let url = '@Url.Action("EditVerifyManager", "Home")';
                var formData = $(this).serialize();

                $.ajax({
                    url: url,
                    type: "Post",
                    data: formData,
                    success: function (result) {
                        localStorage.clear();
                       // alert("Successfully saved!");
                        sweetAlert("Save");
                       

                    },
                    error: function (error) {
                        alert("Error while submitting...");
                    }
                });

            });



        });


        function sweetAlert(title) {
            Swal.fire({
                title: title,
                icon: 'success',
                showCancelButton: false,
                showConfirmButton: false,
                timer: 1500
            });
        }


    </script>



</head>
<body>
    <div class="bod">

        <input type="button" value="Close" class="bckBtn" onclick="closePage()" />
        <script>
            function closePage() {
                window.close();
            }
        </script>

        @using (Html.BeginForm("EditVerifyManager", "Home", null, FormMethod.Post, new { @class = "form-control", id = "Form" }))
        {
            @Html.AntiForgeryToken()

            <div class="row space">

                <div class="heading">Field Verification Report</div>

                @Html.HiddenFor(model => model.Id)

                <br />
                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Allocation_Date, "Allocation Date", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Allocation_Date, new { @class = "form-control box", @readonly = "readonly" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Allocation_Date, "Date & Time of Visit", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.VisitDate, new { @class = "form-control box", @readonly = "readonly" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Final_Date, "Final Submit", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Final_Date, new { @class = "form-control box", @readonly = "readonly" })
                    </div>
                </div>

                <div class="form-group col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Application_name, "Applicant Name", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            @Html.TextBoxFor(model => model.Application_name, new { @class = "form-control box", placeholder = "Default text from the database", @readonly = "readonly" })
                        </div>
                    </div>
                </div>

                <div class="form-group col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Application_no, htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Application_no, new { @class = "form-control box", @readonly = "readonly" })
                    </div>
                </div>

                <div class="form-group col-sm-12 col-md-4 col-xl-4">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Company_Name, "Company Name", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Company_Name, new { @class = "form-control box", @readonly = "readonly" })
                    </div>
                </div>

                <div class="form-group col-sm-12 col-md-4 col-xl-4">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Product, "Product", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Product, new { @class = "form-control box", @readonly = "readonly" })
                    </div>
                </div>



                <div class="form-group  col-sm-12 col-md-4 col-xl-4">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Emirate, "Emirate", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Emirate, new { @class = "form-control box", @readonly = "readonly" })
                    </div>
                </div>


                <div class="form-group  col-sm-12 col-md-4 col-xl-12">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Company_Address, "Company Address", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Company_Address, new { @class = "form-control box", @readonly = "readonly", @style = "width: 600px;" })
                    </div>
                </div>


                <div class="form-group  col-sm-12 col-md-4 col-xl-12">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Landmark, "Landmark", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Landmark, new { @class = "form-control box", @readonly = "readonly", @style = "width: 600px;" })
                    </div>
                </div>


                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Contacted_Person, "Contacted Person", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Contacted_Person, new { @class = "form-control box", @readonly = "readonly" })
                    </div>
                </div>


                <div class="form-group  col-sm-12 col-md-4 col-xl-6">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Landline, htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Landline, new { @class = "form-control box", @readonly = "readonly" })
                    </div>

                </div>



                <div class="form-group  col-sm-12 col-md-4 col-xl-6">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Contacted_Person_Mobile_No, "Contacted Person Mobile No", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Contacted_Person_Mobile_No, new { @class = "form-control box", @readonly = "readonly" })
                    </div>
                </div>


                <div class="form-group  col-sm-12 col-md-4 col-xl-6">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Trade_License_Number, "Trade License Number", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Trade_License_Number, new { @class = "form-control box", @readonly = "readonly", @style = "width: 400px;" })
                    </div>
                </div>


                <br />

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Validated_Office_Landline, "Validated Office Landline", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Validated_Office_Landline, new List<SelectListItem>
                                   {
                                       new SelectListItem { Text = "NA", Value = "NA" },
                                       new SelectListItem { Text = "Yes", Value = "Yes" },
                                       new SelectListItem { Text = "No", Value = "No" },

                                   }, new { @class = "form-control box dropdown-styled" })
                        @Html.ValidationMessageFor(model => model.Validated_Office_Landline, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Validated_Office_Landline_No, "If Yes, Validated Office Landline No", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Validated_Office_Landline_No, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Validated_Office_Landline_No, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Validated_Office_Landline_NotReason, "If Not, Specify Reason", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Validated_Office_Landline_NotReason, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Validated_Office_Landline_NotReason, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Source_of_Validated_Number, "Source of Validated Number", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Source_of_Validated_Number, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Source_of_Validated_Number, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Office_Location_Type, "Office Location Type", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>            <div class="col-md-10">
                        @Html.EditorFor(model => model.Office_Location_Type, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Office_Location_Type, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Subject_company_signboard, "Subject Company Signboard", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Subject_company_signboard, new List<SelectListItem>
                                       {
                                       new SelectListItem { Text = "NA", Value = "NA" },
                                       new SelectListItem { Text = "Yes", Value = "Yes" },
                                       new SelectListItem { Text = "No", Value = "No" },

                                       }, new { @class = "form-control box dropdown-styled" })
                        @Html.ValidationMessageFor(model => model.Subject_company_signboard, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Available_OfficeDoor, "Available At Office Door", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>                          <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Available_OfficeDoor, new List<SelectListItem>
                                      {
                                      new SelectListItem { Text = "NA", Value = "NA" },
                                      new SelectListItem { Text = "Yes", Value = "Yes" },
                                      new SelectListItem { Text = "No", Value = "No" },

                                      }, new { @class = "form-control box dropdown-styled" })
                        @Html.ValidationMessageFor(model => model.Available_OfficeDoor, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Different_CompanyNameBoard_Seen, "Different Company Name Board Seen", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>                                 <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Different_CompanyNameBoard_Seen, new List<SelectListItem>
                                  {
                                  new SelectListItem { Text = "NA", Value = "NA" },
                                  new SelectListItem { Text = "Yes", Value = "Yes" },
                                  new SelectListItem { Text = "No", Value = "No" },

                                  }, new { @class = "form-control box dropdown-styled" })
                        @Html.ValidationMessageFor(model => model.Different_CompanyNameBoard_Seen, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Different_CompanyNameBoard_Seen_Reason, "If Different then Specify Reason", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Different_CompanyNameBoard_Seen_Reason, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Different_CompanyNameBoard_Seen_Reason, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Type_Signboard_OnDoor, "Type of Signboard on Door", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Type_Signboard_OnDoor, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Type_Signboard_OnDoor, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Name_SocietyBoard, "Name on Society board", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Name_SocietyBoard, new List<SelectListItem>
                               {
                               new SelectListItem { Text = "NA", Value = "NA" },
                               new SelectListItem { Text = "Yes", Value = "Yes" },
                               new SelectListItem { Text = "No", Value = "No" },

                               }, new { @class = "form-control box dropdown-styled" })
                        @Html.ValidationMessageFor(model => model.Name_SocietyBoard, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.SecurityGuard_Building, "Security Guard For the Building", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.SecurityGuard_Building, new List<SelectListItem>
                              {
                              new SelectListItem { Text = "NA", Value = "NA" },
                              new SelectListItem { Text = "Yes", Value = "Yes" },
                              new SelectListItem { Text = "No", Value = "No" },

                              }, new { @class = "form-control box dropdown-styled" })
                        @Html.ValidationMessageFor(model => model.SecurityGuard_Building, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ReceptionDesk, "Reception Desk", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.ReceptionDesk, new List<SelectListItem>
                               {
                               new SelectListItem { Text = "NA", Value = "NA" },
                               new SelectListItem { Text = "Yes", Value = "Yes" },
                               new SelectListItem { Text = "No", Value = "No" },

                               }, new { @class = "form-control box dropdown-styled" })
                        @Html.ValidationMessageFor(model => model.ReceptionDesk, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.BusinessActivity_Seen, "Business Activity Seen", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">

                        @Html.DropDownListFor(model => model.BusinessActivity_Seen, new List<SelectListItem>
                            {
                            new SelectListItem { Text = "NA", Value = "NA" },
                            new SelectListItem { Text = "Yes", Value = "Yes" },
                            new SelectListItem { Text = "No", Value = "No" },

                            }, new { @class = "form-control box dropdown-styled" })
                        @Html.ValidationMessageFor(model => model.BusinessActivity_Seen, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-6">
                    <div class="row">
                        <div class="col-md-12">

                            @Html.LabelFor(model => model.Assets_Seen, "Assets Seen", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">

                        @Html.EditorFor(model => model.Assets_Seen, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Assets_Seen, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Setup_of_Office, "Setup of Office", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">

                        @Html.DropDownListFor(model => model.Setup_of_Office, new List<SelectListItem>
                           {
                               new SelectListItem { Text = "NA", Value = "NA" },
                               new SelectListItem { Text = "Excellent", Value = "Excellent" },
                               new SelectListItem { Text = "Good", Value = "Good" },
                               new SelectListItem { Text = "Average", Value = "Average" },
                               new SelectListItem { Text = "Basic", Value = "Basic" },
                               new SelectListItem { Text = "Poor", Value = "Poor" },


                           }, new { @class = "form-control box dropdown-styled" })

                        @Html.ValidationMessageFor(model => model.Setup_of_Office, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.TradeLicense_Displayed, "Trade License of the company displayed on the premises", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">

                        @Html.EditorFor(model => model.TradeLicense_Displayed, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.TradeLicense_Displayed, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-6">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.WebsiteAddress_Active, "Website Address and is the Company Website Active", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.WebsiteAddress_Active, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.WebsiteAddress_Active, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Nature_of_Business, "Nature of Business", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Nature_of_Business, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Nature_of_Business, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-xl-9">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Office_observation, "Office Observation", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Office_observation, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Office_observation, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.No_Employees_Seen, "Number of Employees seen", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>                                        <div class="col-md-10">
                        @Html.EditorFor(model => model.No_Employees_Seen, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.No_Employees_Seen, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.No_Employees_ContactedPerson, "Number of Employees as per contacted person", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>                                               <div class="col-md-10">
                        @Html.EditorFor(model => model.No_Employees_ContactedPerson, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.No_Employees_ContactedPerson, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-6">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Less_Emp_Reason, "If Less Employees Seen (Specify Reason)", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>                                        <div class="col-md-10">
                        @Html.EditorFor(model => model.Less_Emp_Reason, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Less_Emp_Reason, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.If_Sister_ConcernCompany, "if Sister Concern Company", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>                                                      <div class="col-md-10">
                        @Html.EditorFor(model => model.If_Sister_ConcernCompany, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.If_Sister_ConcernCompany, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Co_Owenrship_details, "Group Co Owenrship details", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>                                                             <div class="col-md-10">
                        @Html.EditorFor(model => model.Co_Owenrship_details, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Co_Owenrship_details, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.External_Audit, htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>                                                                    <div class="col-md-10">
                        @Html.EditorFor(model => model.External_Audit, "External Audit done, if Yes Auditor are", new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.External_Audit, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Annual_Revenue, "Annual Revenue and Annual Profite", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>                                                                           <div class="col-md-10">
                        @Html.EditorFor(model => model.Annual_Revenue, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Annual_Revenue, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Applicants_Designation, "Applicants Designation", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>                                                                                  <div class="col-md-10">
                        @Html.EditorFor(model => model.Applicants_Designation, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Applicants_Designation, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.DoJ_Applicant, "Date of Joining", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>                                                                                         <div class="col-md-10">
                        @Html.EditorFor(model => model.DoJ_Applicant, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.DoJ_Applicant, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Gross_Salary, "Gross Salary (if employee)", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>                                                                                                <div class="col-md-10">
                        @Html.EditorFor(model => model.Gross_Salary, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Gross_Salary, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Profit, "Profit % (if owner/partner)", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Profit, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Profit, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Accommodation_Provided, "Accommodation Provided", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Accommodation_Provided, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Accommodation_Provided, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Applicant_Reports_to, "Applicant Reports to", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Applicant_Reports_to, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Applicant_Reports_to, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-9">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(
                                model => model.AUTHORIZED_SIGNATORY,
                                "Whether the applicant is related to the OWNER or AUTHORIZED SIGNATORY: If Yes, Relation: y",
                                new { @class = "control-label label" }
                            )
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AUTHORIZED_SIGNATORY, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.AUTHORIZED_SIGNATORY, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Details_Verified_With, "Details Verified With", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Details_Verified_With, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Details_Verified_With, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Orginal_Seen, "Orginal Seen", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Orginal_Seen, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Orginal_Seen, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Trade_License_captured, "Is the tenancy/Trade License captured", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Trade_License_captured, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Trade_License_captured, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Business_card_captured, "Business card captured", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Business_card_captured, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Business_card_captured, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Documents_Captured, "Documents Captured", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Documents_Captured, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Documents_Captured, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.VAT_RegNumber, "VAT Registration Number", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.VAT_RegNumber, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.VAT_RegNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-6 col-lg-4">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Makani_No, "GPS Co-ordinates/Makani Number", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Makani_No, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Makani_No, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Name_Neighbor1_feedback, "Name of the Neighbor 1 and their feedback", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name_Neighbor1_feedback, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Name_Neighbor1_feedback, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Name_Neighbor2_feedback, "Name of the Neighbor 2 and their feedback", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name_Neighbor2_feedback, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Name_Neighbor2_feedback, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Name_Security_feedback, "Name of the Security and feedback", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name_Security_feedback, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Name_Security_feedback, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.FE_Decision, "FE Decision", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">

                        @Html.DropDownListFor(model => model.FE_Decision, new List<SelectListItem>
                   {
                       new SelectListItem { Text = "NA", Value = "NA" },
                       new SelectListItem { Text = "Satisfactory", Value = "Satisfactory" },
                       new SelectListItem { Text = "Unsatisfactory", Value = "Unsatisfactory" },
                       new SelectListItem { Text = "Refer to the Bank", Value = "Refer to the Bank" },

                   }, new { @class = "form-control box dropdown-styled" })

                        @*@Html.EditorFor(model => model.FE_Decision, new { htmlAttributes = new { @class = "form-control box" } })*@
                        @Html.ValidationMessageFor(model => model.FE_Decision, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Latitude, "Latitude", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Longitude, "Longitude", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control box" } })
                        @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group col-sm-12">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.Label("Location", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        <input id="lati" type="hidden" />
                        <input id="langi" type="hidden" />
                        <div id="map" style="width:350px; height: 350px; display: inline-block"></div>
                    </div>
                </div>

                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Feedback, htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Feedback, new { @class = "form-control box", @style = "width: 1000px; height: 300px; padding-top: 0;" })
                        @Html.ValidationMessageFor(model => model.Feedback, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-12">
                    <br />
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Images, "Images (Rearrange Images If Required)", htmlAttributes: new { @class = "control-label label" })
                        </div>
                    </div>
                    <div id="imageContainer" class="col-md-10">
                        <div id="divLoading">
                            <!-- Loading spinner GIF -->
                            <img src="~/Content/Images/loading1.gif" alt="Loading...">
                        </div>
                        <div id="Loaded">
                            @Html.Action("_ImageContainer", new { id = Model.Id })
                        </div>

                    </div>



                </div>

                <div class="col-sm-12">
                    @Html.LabelFor(model => model.Customer_Signature, "Signatures", htmlAttributes: new { @class = "control-label label" })
                    <div>
                        @Html.Action("DisplaySign", "FE", new { id = Model.Id })
                    </div>

                </div>

                <div class="form-group col-sm-12 col-md-4" style="margin: 50px 0px;">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Submit" class="SubBtn" style="width:150px; height: 50px" />
                    </div>
                </div>
            </div>
        }
    </div>
</body>

</html>


